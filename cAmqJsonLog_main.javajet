<%@ jet skeleton="../common/cLanguage.skeleton"
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.process.IConnection
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
	java.util.HashMap
	java.util.Map.Entry
	org.talend.designer.codegen.config.CamelEndpointBuilder
" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	CamelEndpointBuilder builder = CamelEndpointBuilder.getBuilder();
	String useLogIp = ElementParameterParser.getValue(node, "__USE_LOGEIP__");
	String logName = ElementParameterParser.getValue(node, "__LOGGING_CATEGORY__");
	String message = ElementParameterParser.getValue(node, "__MESSAGE__");
	//JMS configuration
	String name = ElementParameterParser.getValue(node, "__CONNECTION_FACOTRY_CONFIGURATION__");
	String type = ElementParameterParser.getValue(node, "__TYPE__");
	String destination = ElementParameterParser.getValue(node, "__DESTINATION__").trim();
	builder.setComponent(name.replace("_", ""));
	builder.useDoubleSlash(false);
	builder.setName("\"" + type + ":\"+" + destination);
	
	List<Map<String, String>> tableValues =
    (List<Map<String,String>>)ElementParameterParser.getObjectValue(
        node,
        "__VALUES__"
    );
	String useNamespaces = ElementParameterParser.getValue(node, "__USE_NAMESPACES__");
	List< ? extends IConnection> conns = node.getIncomingConnections();
	if(conns.size()>0) {
		 	for(Map<String, String> headersMap: tableValues){
		 			String headerName = (String) headersMap.get("NAME");
					String defaultPrefix = "_CIMT_NL_ELASTIC_";
		 			String headerLanguage = headersMap.get("LANGUAGE");
		 			String headerExpression = headersMap.get("EXPRESSION");
		 			String exp = getExpression(headerLanguage, headerExpression, cid, useNamespaces, ""); 
		 			%>
		 			.setHeader("<%=defaultPrefix%>"+<%=headerName%>).<%=exp%>
					
<%
		 	}
			%>
			.process(new org.apache.camel.Processor(){
					public void process(org.apache.camel.Exchange exchange) throws Exception{
					Map<String, Object> allHeaders = exchange.getIn().getHeaders();
					Map<String,Object> elasticMsgBody = new HashMap<String, Object>();
					for(String temp_headerKey: allHeaders.keySet() ){
					if(temp_headerKey.startsWith("_CIMT_NL_ELASTIC_")){
						//System.out.println("the data for "+temp_headerKey+": "+allHeaders.get(temp_headerKey));
						elasticMsgBody.put(temp_headerKey.replaceAll("_CIMT_NL_ELASTIC_", ""), allHeaders.get(temp_headerKey));
					}
					}
					exchange.getIn().setHeader("_CIMT_NL_ELASTIC_ORIGINAL_BODY",exchange.getIn().getBody());
					exchange.getIn().setBody(elasticMsgBody);
			}})
			<% String uri = builder.build(); %>
			.marshal().json(JsonLibrary.Jackson)
			.convertBodyTo(String.class)
			.to(<%=uri%>)
			.setBody().simple("${header._CIMT_NL_ELASTIC_ORIGINAL_BODY}")
			.removeHeaders("_CIMT_NL_ELASTIC_*")
			
			
	<%	
	}
	if("true".equals(useLogIp)){
		
%>
.log(org.apache.camel.LoggingLevel.WARN,"<%=cid%>",<%=message%>)
<%
	}
%>